-- Fusion UI Framework v2.0
local Fusion = {}
Fusion.__index = Fusion

-- THEMES
Fusion.Themes = {
    Dark = {
        Background = Color3.fromRGB(20, 20, 25),
        TopBar = Color3.fromRGB(30, 30, 40),
        TabActive = Color3.fromRGB(40, 140, 255),
        TabInactive = Color3.fromRGB(45, 45, 60),
        Button = Color3.fromRGB(60, 60, 80),
        ToggleOn = Color3.fromRGB(0, 180, 120),
        ToggleOff = Color3.fromRGB(80, 30, 30),
        SliderTrack = Color3.fromRGB(54, 60, 86),
        SliderThumb = Color3.fromRGB(0, 150, 255),
        Highlight = Color3.fromRGB(85, 170, 255),
        Text = Color3.new(1, 1, 1)
    },
    Blood = {
        Background = Color3.fromRGB(25, 15, 15),
        TopBar = Color3.fromRGB(50, 20, 20),
        TabActive = Color3.fromRGB(180, 23, 44),
        TabInactive = Color3.fromRGB(70, 25, 25),
        Button = Color3.fromRGB(80, 30, 30),
        ToggleOn = Color3.fromRGB(180, 0, 0),
        ToggleOff = Color3.fromRGB(50, 20, 20),
        SliderTrack = Color3.fromRGB(60, 25, 25),
        SliderThumb = Color3.fromRGB(220, 40, 40),
        Highlight = Color3.fromRGB(170, 60, 80),
        Text = Color3.new(1, 1, 1)
    }
}

-- CORE CREATE FUNCTIONS
function Fusion:CreateWindow(options)
    local Player = game:GetService("Players").LocalPlayer
    local UIS = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    local theme = self.Themes[options.Theme or "Dark"]

    -- MAIN GUI ROOT
    local gui = Instance.new("ScreenGui")
    gui.Name = "FusionUI"
    gui.ResetOnSpawn = false
    gui.Parent = Player:WaitForChild("PlayerGui")
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- MAIN WINDOW
    local main = Instance.new("Frame")
    main.Name = "MainWindow"
    main.Size = UDim2.new(0.5, 0, 0.62, 0)
    main.Position = UDim2.new(0.25, 0, 0.19, 0)
    main.BackgroundColor3 = theme.Background
    main.BackgroundTransparency = 0.05
    main.Parent = gui

    local c = Instance.new("UICorner", main)
    c.CornerRadius = UDim.new(0, 10)
    local s = Instance.new("UIStroke", main)
    s.Thickness = 2
    s.Color = theme.TabActive

    -- DRAGGING (TopBar & Main)
    local dragging, dragStart, offset
    main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            offset = main.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(offset.X.Scale, offset.X.Offset + delta.X, offset.Y.Scale, offset.Y.Offset + delta.Y)
        end
    end)

    -- TOP BAR
    local topBar = Instance.new("Frame", main)
    topBar.Size = UDim2.new(1, 0, 0.08, 0)
    topBar.BackgroundColor3 = theme.TopBar
    topBar.BorderSizePixel = 0

    local topCorner = Instance.new("UICorner", topBar)
    topCorner.CornerRadius = UDim.new(0, 10)

    local title = Instance.new("TextLabel", topBar)
    title.Text = options.Name or "Fusion UI"
    title.Size = UDim2.new(0.8, 0, 1, 0)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 16
    title.TextColor3 = theme.Text
    title.BackgroundTransparency = 1
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Position = UDim2.new(0.02, 0, 0, 0)

    local closeBtn = Instance.new("TextButton", topBar)
    closeBtn.Size = UDim2.new(0.12, 0, 1, 0)
    closeBtn.Position = UDim2.new(0.88, -2, 0, 0)
    closeBtn.Text = "X"
    closeBtn.TextColor3 = Color3.fromRGB(255, 90, 90)
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.TextSize = 18
    closeBtn.BackgroundColor3 = theme.TabInactive
    closeBtn.AutoButtonColor = false
    local closeCorner = Instance.new("UICorner", closeBtn)
    closeCorner.CornerRadius = UDim.new(0, 10)
    closeBtn.MouseButton1Click:Connect(function() gui:Destroy() end)
    closeBtn.MouseEnter:Connect(function()
        TweenService:Create(closeBtn, TweenInfo.new(0.15), {BackgroundColor3 = theme.TabActive}):Play()
    end)
    closeBtn.MouseLeave:Connect(function()
        TweenService:Create(closeBtn, TweenInfo.new(0.15), {BackgroundColor3 = theme.TabInactive}):Play()
    end)

    -- TABS
    local tabBar = Instance.new("Frame", main)
    tabBar.Size = UDim2.new(1, 0, 0.07, 0)
    tabBar.Position = UDim2.new(0, 0, 0.08, 0)
    tabBar.BackgroundColor3 = theme.Background
    tabBar.BackgroundTransparency = 1

    local tabs = {}
    local activeTab
    local contentArea = Instance.new("Frame", main)
    contentArea.Size = UDim2.new(1, 0, 0.85, 0)
    contentArea.Position = UDim2.new(0, 0, 0.15, 0)
    contentArea.BackgroundTransparency = 1

    function tabs:AddTab(tabName)
        local index = #tabs + 1
        local tabBtn = Instance.new("TextButton", tabBar)
        tabBtn.Size = UDim2.new(0.18, -5, 1, 0)
        tabBtn.Position = UDim2.new((index-1)*0.19, 0, 0, 0)
        tabBtn.Text = tabName
        tabBtn.Font = Enum.Font.GothamBold
        tabBtn.TextColor3 = theme.Text
        tabBtn.BackgroundColor3 = theme.TabInactive
        tabBtn.BackgroundTransparency = 0
        local tabCorner = Instance.new("UICorner", tabBtn)
        tabCorner.CornerRadius = UDim.new(0, 10)
        local tabContent = Instance.new("ScrollingFrame", contentArea)
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.Visible = false
        tabContent.BackgroundTransparency = 1
        tabContent.CanvasSize = UDim2.new(0,0,5,0)
        tabContent.ScrollBarThickness = 4
        local list = Instance.new("UIListLayout", tabContent)
        list.Padding = UDim.new(0, 12)
        list.SortOrder = Enum.SortOrder.LayoutOrder

        -- Tab switching
        tabBtn.MouseButton1Click:Connect(function()
            for i,v in ipairs(tabs) do
                v.btn.BackgroundColor3 = theme.TabInactive
                v.content.Visible = false
            end
            tabBtn.BackgroundColor3 = theme.TabActive
            tabContent.Visible = true
            activeTab = tabContent
        end)
        -- Default first active
        if index==1 then
            tabBtn.BackgroundColor3 = theme.TabActive
            tabContent.Visible = true
            activeTab = tabContent
        end
        table.insert(tabs, {btn=tabBtn, content=tabContent, name=tabName})

        -- SECTION/BUTTON/TOGGLE/SLIDER FACTORY
        local api = {}
        function api:AddSection(sectionName)
            local section = Instance.new("Frame", tabContent)
            section.Size = UDim2.new(1, -10, 0, 40)
            section.BackgroundColor3 = theme.Background
            section.BackgroundTransparency = 1
            local label = Instance.new("TextLabel", section)
            label.Text = sectionName
            label.Font = Enum.Font.GothamBold
            label.TextSize = 16
            label.TextColor3 = theme.Text
            label.Size = UDim2.new(1, 0, 0, 28)
            label.BackgroundTransparency = 1
            local sectionApi = {}
            function sectionApi:AddButton(text, callback)
                local btn = Instance.new("TextButton", tabContent)
                btn.Size = UDim2.new(0.95, 0, 0, 38)
                btn.Text = text
                btn.Font = Enum.Font.Gotham
                btn.TextColor3 = theme.Text
                btn.BackgroundColor3 = theme.Button
                btn.AutoButtonColor = false
                local c = Instance.new("UICorner", btn)
                c.CornerRadius = UDim.new(0, 8)
                local s = Instance.new("UIStroke", btn)
                s.Color = theme.TabActive
                s.Thickness = 1
                btn.MouseButton1Click:Connect(callback)
                btn.MouseEnter:Connect(function()
                    TweenService:Create(btn, TweenInfo.new(0.1), {BackgroundColor3=theme.Highlight}):Play()
                end)
                btn.MouseLeave:Connect(function()
                    TweenService:Create(btn, TweenInfo.new(0.1), {BackgroundColor3=theme.Button}):Play()
                end)
                return btn
            end
            function sectionApi:AddToggle(text, default, callback)
                local frame = Instance.new("Frame", tabContent)
                frame.Size = UDim2.new(0.95, 0, 0, 38)
                frame.BackgroundTransparency = 1
                local label = Instance.new("TextLabel", frame)
                label.Text = text
                label.Font = Enum.Font.Gotham
                label.TextSize = 15
                label.TextColor3 = theme.Text
                label.BackgroundTransparency = 1
                label.Size = UDim2.new(0.7, 0, 1, 0)
                label.Position = UDim2.new(0, 0, 0, 0)
                local toggle = Instance.new("TextButton", frame)
                toggle.Size = UDim2.new(0.24, 0, 0.7, 0)
                toggle.Position = UDim2.new(0.75, 0, 0.15, 0)
                toggle.BackgroundColor3 = default and theme.ToggleOn or theme.ToggleOff
                toggle.Text = default and "ON" or "OFF"
                toggle.Font = Enum.Font.GothamBold
                toggle.TextColor3 = theme.Text
                local c = Instance.new("UICorner", toggle)
                c.CornerRadius = UDim.new(0, 8)
                local state = default
                toggle.MouseButton1Click:Connect(function()
                    state = not state
                    toggle.Text = state and "ON" or "OFF"
                    toggle.BackgroundColor3 = state and theme.ToggleOn or theme.ToggleOff
                    callback(state)
                end)
                return toggle
            end
            function sectionApi:AddSlider(text, min, max, default, callback)
                local frame = Instance.new("Frame", tabContent)
                frame.Size = UDim2.new(0.95, 0, 0, 52)
                frame.BackgroundTransparency = 1
                local label = Instance.new("TextLabel", frame)
                label.Text = text
                label.Font = Enum.Font.Gotham
                label.TextSize = 15
                label.TextColor3 = theme.Text
                label.BackgroundTransparency = 1
                label.Size = UDim2.new(0.6, 0, 0, 24)
                label.Position = UDim2.new(0, 0, 0, 0)
                local valLabel = Instance.new("TextLabel", frame)
                valLabel.Text = tostring(default)
                valLabel.Font = Enum.Font.GothamBold
                valLabel.TextSize = 15
                valLabel.TextColor3 = theme.Text
                valLabel.BackgroundTransparency = 1
                valLabel.Size = UDim2.new(0.2, 0, 0, 24)
                valLabel.Position = UDim2.new(0.6, 0, 0, 0)
                local track = Instance.new("Frame", frame)
                track.Size = UDim2.new(1, 0, 0, 8)
                track.Position = UDim2.new(0, 0, 0, 32)
                track.BackgroundColor3 = theme.SliderTrack
                local cTrack = Instance.new("UICorner", track)
                cTrack.CornerRadius = UDim.new(0, 6)
                local thumb = Instance.new("TextButton", frame)
                thumb.Size = UDim2.new(0, 16, 0, 20)
                thumb.Position = UDim2.new((default-min)/(max-min), -8, 0, 24)
                thumb.BackgroundColor3 = theme.SliderThumb
                thumb.Text = ""
                local cThumb = Instance.new("UICorner", thumb)
                cThumb.CornerRadius = UDim.new(0, 8)
                local dragging = false
                local value = default
                thumb.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        dragging = true
                    end
                end)
                UIS.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        dragging = false
                    end
                end)
                UIS.InputChanged:Connect(function(input)
                    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        local pos = math.clamp((input.Position.X-track.AbsolutePosition.X)/track.AbsoluteSize.X, 0, 1)
                        value = math.floor(min + (max-min)*pos)
                        valLabel.Text = tostring(value)
                        thumb.Position = UDim2.new(pos, -8, 0, 24)
                        callback(value)
                    end
                end)
                return thumb
            end
            return sectionApi
        end
        return api
    end

    -- Main API
    local api = {}
    function api:AddTab(name)
        return tabs:AddTab(name)
    end
    function api:SetTheme(newTheme)
        -- (just for demonstration, can be expanded)
        for _, v in pairs(self.Themes[newTheme] or {}) do
            theme[v] = self.Themes[newTheme][v]
        end
    end

    return api
end

return Fusion
